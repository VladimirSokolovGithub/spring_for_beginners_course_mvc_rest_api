Глава 6 - chapter_6_REST_API_JSON - рассматривается в отдельном проекте
- spring_for_beginners_course_mvc_rest_api

***********************************************************************

*** Les_1_introduction_to_REST_API ***

Будем изучать темы необходимые для построения Spring REST API приложения.

REST - Representational State Transfer -
- что переводится как передача состояния представления — это архитектурный стиль проектирования API
с использованием протокола HTTP.

(REST — архитектурный стиль взаимодействия компонентов распределённого приложения в сети.
Другими словами, REST — это набор правил того, как программисту организовать написание
кода серверного приложения, чтобы все системы легко обменивались данными и
приложение можно было масштабировать.)

JSON (JavaScript Object Notation) — текстовый формат обмена данными,
основанный на JavaScript. Легко читается человеком и машиной.

JSON информацию, полученную в виде ответа от стороннего Сервиса можно преобразовать в Java объект.

Такую информацию в виде JSON мы можем получать в виде REST API, если сторонний сервис поддерживает REST API.

***********************************************************************

*** Les_2_introduction_to_JSON ***

JSON (JavaScript Object Notation) — текстовый формат обмена данными,
основанный на JavaScript. Легко читается человеком и машиной.

Описание JSON смотрим в слайде №1.

Для того чтобы преобразовывать JSON в Java объект и наоборот Spring за кулисами использует
проект JACSON, который мы будем добавлять в pom.xml файл при написании проекта.
Естественно что писать какой-либо код для преобразования JSON в объект Java или наоборот
не нужно, Spring всё сделает сам. Но чтобы это преобразование происходило, у нас должен быть написан
для JSON соответствующий класс.
Преобразование Java объекта "emp" в JSON происходит при помощи геттеров. В JSON создаются ключи с такими же
именами как и поля нашего объекта и с помощью геттеров этим ключам, назначаются значения.
И наоборот чтобы из JSON получить объект класса Employee используются сеттеры. Т.е. создается объект
класса Employee и каждому полю класса Employee назначается значение ключа соответствующего
этому полю - объекта JSON.
Но в Spring мы сами работать с геттерами и сеттерами не будем. Spring сделает эту работу за нас.

***********************************************************************

*** Les_3_HTTP методы GET и POST ***
см.слайды

***********************************************************************

*** Les_4_Стандарты REST API ***
см.слайды

***********************************************************************

*** Les_5_Конфигурация приложения ***

Данный проект создаётся, как maven проект с применением архетипа maven-archetype-webapp.
Данный проект будет использовать Spring MVC and Hibernate.
Проект будет конфигурироваться без использования xml файлов applicationContext.xml и web.xml. т.е.
все конфигурации будут находиться в java коде.
Далее смотрим слайды по конфигурации приложения.
1. Подготовка БД - будем работать с таблицей из предыдущего урока employees_mvc в MySQL Workbench.
2. Далее добавляем dependency в pom.xml.

Добавим зависимость
    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-webmvc</artifactId>
      <version>5.3.23</version>
    </dependency>
она предоставляет поддержку spring REST.

а так же зависимости:
    //    javax.servlet-api нужна чтобы работал DispatcherServlet
    <dependency>
      <groupId>javax.servlet</groupId>
      <artifactId>javax.servlet-api</artifactId>
      <version>4.0.1</version>
      <scope>provided</scope>
    </dependency>

    <dependency>
      <groupId>org.hibernate</groupId>
      <artifactId>hibernate-core</artifactId>
      <version>5.4.24.Final</version>
    </dependency>

    <dependency>
      <groupId>mysql</groupId>
      <artifactId>mysql-connector-java</artifactId>
      <version>8.0.31</version>
    </dependency>

    <dependency>
      <groupId>com.mchange</groupId>
      <artifactId>c3p0</artifactId>
      <version>0.9.5.5</version>
    </dependency>

    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-orm</artifactId>
      <version>5.3.23</version>
    </dependency>

    // Spring используя проект jackson-databind сможет автоматически конвертировать объекты в формат
    //JSON и наоборот из формата JSON сможем получать объекты java.
    <dependency>
          <groupId>com.fasterxml.jackson.core</groupId>
          <artifactId>jackson-databind</artifactId>
          <version>2.13.4.2</version>
    </dependency>

Далее в папке main создадим директорию java. Пометим эту директорию как Sources Root.
Далее в директории java создадим пакет spring_rest.

Файл index.jsp удаляем.

3. Далее нам нужно создать конфигурационный java класс.
Для этого создадим пакет package spring_rest.configuration, а в нем java класс MyConfig.

4. Далее вместо web.xml нам нужно создать класс MyWebInitializer,
заэкстндить его от класса AbstractAnnotationConfigDispatcherServletInitializer и реализовать 3 метода.

5. Нужно добавить в проект Tomcat сервер.


***********************************************************************

*** Les_6_Получение списка всех работников ***

Так же в качестве клиента мы можем использовать не браузер, а разного рода программы.
Одной из таких программ является очень распространенный - postman.
Скачаем её. Она позволяет использовать не только метод GET, но и другие методы к http запросу.

***********************************************************************

*** Les_7_Получение одного работника по ID ***

***********************************************************************

*** Les_8_Обработка исключений ***

***********************************************************************

*** Les_9_Глобальная обработка исключений ***

***********************************************************************

*** Les_10_Добавление нового работника ***

***********************************************************************

*** Les_11_Изменение существующего работника ***

***********************************************************************

*** Les_12_Удаление работника ***

***********************************************************************

*** Les_13_ ***

